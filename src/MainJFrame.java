/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

import com.savarese.rocksaw.net.RawSocket;
import org.savarese.vserv.tcpip.ICMPEchoPacket;
import org.savarese.vserv.tcpip.IPPacket;
import org.savarese.vserv.tcpip.TCPPacket;
import org.savarese.vserv.tcpip.UDPPacket;

import java.io.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import static javax.xml.bind.DatatypeConverter.printHexBinary;

/**
* @author root
*/
public class MainJFrame extends javax.swing.JFrame {


	/**
	 * Creates new form MainJFrame
	 */
	public MainJFrame() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings ("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		buttonGroupICMPType = new javax.swing.ButtonGroup();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanelUDP = new javax.swing.JPanel();
		jButtonSendUDP = new javax.swing.JButton();
		jLabelUDPSrcPort = new javax.swing.JLabel();
		jLabelUDPDstPort = new javax.swing.JLabel();
		jTextFieldUDPSrcPort = new javax.swing.JTextField();
		jTextFieldUDPDstPort = new javax.swing.JTextField();
		jLabelUDPHeaderLength = new javax.swing.JLabel();
		jTextFieldUDPHeaderLength = new javax.swing.JTextField();
		jButtonUDPtoHex = new javax.swing.JButton();
		jPanelTCP = new javax.swing.JPanel();
		jLabelTCPHeaderLength = new javax.swing.JLabel();
		jButtonSendTCP = new javax.swing.JButton();
		jTextFieldTCPHeaderLength = new javax.swing.JTextField();
		jLabelTCPSrcPort = new javax.swing.JLabel();
		jLabelTCPDstPort = new javax.swing.JLabel();
		jTextFieldTCPSrcPort = new javax.swing.JTextField();
		jTextFieldTCPDstPort = new javax.swing.JTextField();
		jLabelACKnumber = new javax.swing.JLabel();
		jTextFieldACKnumber = new javax.swing.JTextField();
		jLabelFlags = new javax.swing.JLabel();
		jCheckBoxSYN = new javax.swing.JCheckBox();
		jCheckBoxACK = new javax.swing.JCheckBox();
		jCheckBoxFIN = new javax.swing.JCheckBox();
		jCheckBoxRST = new javax.swing.JCheckBox();
		jCheckBoxPUSH = new javax.swing.JCheckBox();
		jCheckBoxURG = new javax.swing.JCheckBox();
		jLabelSeq = new javax.swing.JLabel();
		jTextFieldSeq = new javax.swing.JTextField();
		jLabelWin = new javax.swing.JLabel();
		jTextFieldWin = new javax.swing.JTextField();
		jCheckBoxTCPEditChecksum = new javax.swing.JCheckBox();
		jTextFieldTCPEditChecksum = new javax.swing.JTextField();
		jButtonTCPtoHex = new javax.swing.JButton();
		jButtonAddTCP = new javax.swing.JButton();
		jPanelICMP = new javax.swing.JPanel();
		jButtonSendEcho = new javax.swing.JButton();
		jLabelEchoICMPID = new javax.swing.JLabel();
		jTextFieldICMPID = new javax.swing.JTextField();
		jLabelICMPSequence = new javax.swing.JLabel();
		jTextFieldICMPSequence = new javax.swing.JTextField();
		jLabelICMPSendData = new javax.swing.JLabel();
		jTextFieldICMPSendData = new javax.swing.JTextField();
		jRadioButtonEchoReply = new javax.swing.JRadioButton();
		jRadioButtonEchoRequest = new javax.swing.JRadioButton();
		jLabelICMPHeaderLength = new javax.swing.JLabel();
		jTextFieldICMPHeaderLength = new javax.swing.JTextField();
		jCheckBoxICMPChecksum = new javax.swing.JCheckBox();
		jButtonICMPtoHex = new javax.swing.JButton();
		jLabelSrcIP = new javax.swing.JLabel();
		jTextFieldSrcIP = new javax.swing.JTextField();
		jLabelDstIP = new javax.swing.JLabel();
		jTextFieldDstIP = new javax.swing.JTextField();
		jCheckBoxSetIP = new javax.swing.JCheckBox();
		jLabelIPflags = new javax.swing.JLabel();
		jCheckBoxReservedBit = new javax.swing.JCheckBox();
		jCheckBoxDontFragment = new javax.swing.JCheckBox();
		jCheckBoxMoreFragments = new javax.swing.JCheckBox();
		jLabelFragmentOffset = new javax.swing.JLabel();
		jLabelTTL = new javax.swing.JLabel();
		jTextFieldTTL = new javax.swing.JTextField();
		jTextFieldFragmentOffset = new javax.swing.JTextField();
		jLabelIPHeaderLength = new javax.swing.JLabel();
		jTextFieldIPHeaderLength = new javax.swing.JTextField();
		jCheckBoxIPChecksum = new javax.swing.JCheckBox();
		jLabelData = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextAreaData = new javax.swing.JTextArea();
		jSeparator1 = new javax.swing.JSeparator();
		jLabelNetwork = new javax.swing.JLabel();
		jLabelTransport = new javax.swing.JLabel();
		jLabelPayload = new javax.swing.JLabel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextAreaNetwork = new javax.swing.JTextArea();
		jScrollPane4 = new javax.swing.JScrollPane();
		jTextAreaTransport = new javax.swing.JTextArea();
		jScrollPane5 = new javax.swing.JScrollPane();
		jTextAreaPayload = new javax.swing.JTextArea();
		jButtonSendHex = new javax.swing.JButton();
		jButtonClearSequence = new javax.swing.JButton();
		jButtonSendSequence = new javax.swing.JButton();
		jButtonSaveList = new javax.swing.JButton();
		jButtonReadList = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jButtonSendUDP.setText("Отправить");
		jButtonSendUDP.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendUDPActionPerformed(evt);
			}
		});

		jLabelUDPSrcPort.setText("Порт источника");

		jLabelUDPDstPort.setText("Порт назначения");

		jTextFieldUDPSrcPort.setText("40");

		jTextFieldUDPDstPort.setText("3456");

		jLabelUDPHeaderLength.setText("Длина заголовка");

		jTextFieldUDPHeaderLength.setText("8");

		jButtonUDPtoHex.setText("ToHex");
		jButtonUDPtoHex.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonUDPtoHexActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanelUDPLayout = new javax.swing.GroupLayout(jPanelUDP);
		jPanelUDP.setLayout(jPanelUDPLayout);
		jPanelUDPLayout.setHorizontalGroup(
				jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanelUDPLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanelUDPLayout.createSequentialGroup()
												.addComponent(jLabelUDPSrcPort)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jTextFieldUDPSrcPort))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelUDPLayout.createSequentialGroup()
												.addComponent(jLabelUDPHeaderLength)
												.addGap(8, 8, 8)
												.addComponent(jTextFieldUDPHeaderLength))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelUDPLayout.createSequentialGroup()
												.addComponent(jLabelUDPDstPort)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jTextFieldUDPDstPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGap(229, 229, 229)
								.addGroup(jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jButtonSendUDP)
										.addComponent(jButtonUDPtoHex))
								.addGap(79, 79, 79))
		);
		jPanelUDPLayout.setVerticalGroup(
				jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanelUDPLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelUDPSrcPort)
										.addComponent(jTextFieldUDPSrcPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jButtonSendUDP))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelUDPDstPort)
										.addComponent(jTextFieldUDPDstPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jButtonUDPtoHex))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanelUDPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabelUDPHeaderLength)
										.addComponent(jTextFieldUDPHeaderLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(127, Short.MAX_VALUE))
		);

		jTabbedPane1.addTab("UDP", jPanelUDP);

		jLabelTCPHeaderLength.setText("Длина TCP заголовка");

		jButtonSendTCP.setText("Отправить");
		jButtonSendTCP.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendTCPActionPerformed(evt);
			}
		});

		jTextFieldTCPHeaderLength.setText("5");

		jLabelTCPSrcPort.setText("Порт источника");

		jLabelTCPDstPort.setText("Порт назначения");

		jTextFieldTCPSrcPort.setText("145");

		jTextFieldTCPDstPort.setText("150");

		jLabelACKnumber.setText("ACK");

		jTextFieldACKnumber.setText("0");

		jLabelFlags.setText("Флаги");

		jCheckBoxSYN.setSelected(true);
		jCheckBoxSYN.setText("SYN");

		jCheckBoxACK.setText("ACK");

		jCheckBoxFIN.setText("FIN");

		jCheckBoxRST.setText("RST");

		jCheckBoxPUSH.setText("PUSH");

		jCheckBoxURG.setText("URG");

		jLabelSeq.setText("SEQ");

		jTextFieldSeq.setText("1235");

		jLabelWin.setText("Win");

		jTextFieldWin.setText("1460");

		jCheckBoxTCPEditChecksum.setText("Edit checksum");

		jTextFieldTCPEditChecksum.setText("ffff");

		jButtonTCPtoHex.setText("ToHex");
		jButtonTCPtoHex.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonTCPtoHexActionPerformed(evt);
			}
		});

		jButtonAddTCP.setText("Добавить в очередь");
		jButtonAddTCP.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAddTCPActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanelTCPLayout = new javax.swing.GroupLayout(jPanelTCP);
		jPanelTCP.setLayout(jPanelTCPLayout);
		jPanelTCPLayout.setHorizontalGroup(
				jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanelTCPLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanelTCPLayout.createSequentialGroup()
												.addComponent(jLabelSeq)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jTextFieldSeq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(72, 72, 72)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jPanelTCPLayout.createSequentialGroup()
																.addComponent(jTextFieldTCPHeaderLength, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(jLabelFlags))
														.addGroup(jPanelTCPLayout.createSequentialGroup()
																.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																		.addComponent(jTextFieldTCPSrcPort, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
																		.addComponent(jTextFieldTCPDstPort))
																.addGap(18, 18, 18)
																.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(jPanelTCPLayout.createSequentialGroup()
																				.addComponent(jCheckBoxSYN)
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																				.addComponent(jCheckBoxRST))
																		.addGroup(jPanelTCPLayout.createSequentialGroup()
																				.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(jCheckBoxACK)
																						.addComponent(jCheckBoxFIN))
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																				.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(jCheckBoxURG)
																						.addComponent(jCheckBoxPUSH)))
																		.addGroup(jPanelTCPLayout.createSequentialGroup()
																				.addComponent(jCheckBoxTCPEditChecksum)
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																				.addComponent(jTextFieldTCPEditChecksum, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jButtonSendTCP)
														.addComponent(jButtonTCPtoHex)))
										.addGroup(jPanelTCPLayout.createSequentialGroup()
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jPanelTCPLayout.createSequentialGroup()
																.addComponent(jLabelWin)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(jTextFieldWin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																.addComponent(jLabelTCPHeaderLength)
																.addComponent(jLabelTCPSrcPort)
																.addComponent(jLabelTCPDstPort)
																.addGroup(jPanelTCPLayout.createSequentialGroup()
																		.addComponent(jLabelACKnumber)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(jTextFieldACKnumber)
																		.addGap(72, 72, 72))))
												.addGap(0, 0, Short.MAX_VALUE))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTCPLayout.createSequentialGroup()
												.addGap(0, 0, Short.MAX_VALUE)
												.addComponent(jButtonAddTCP)))
								.addContainerGap())
		);
		jPanelTCPLayout.setVerticalGroup(
				jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanelTCPLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelTCPHeaderLength)
										.addComponent(jTextFieldTCPHeaderLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabelFlags)
										.addComponent(jButtonSendTCP))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelTCPSrcPort)
										.addComponent(jTextFieldTCPSrcPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jCheckBoxSYN)
										.addComponent(jCheckBoxRST)
										.addComponent(jButtonTCPtoHex))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanelTCPLayout.createSequentialGroup()
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabelTCPDstPort)
														.addComponent(jTextFieldTCPDstPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabelSeq)
														.addComponent(jTextFieldSeq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(jPanelTCPLayout.createSequentialGroup()
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jCheckBoxPUSH)
														.addComponent(jCheckBoxACK))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jCheckBoxURG)
														.addComponent(jCheckBoxFIN))))
								.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanelTCPLayout.createSequentialGroup()
												.addGap(4, 4, 4)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabelACKnumber)
														.addComponent(jTextFieldACKnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabelWin)
														.addComponent(jTextFieldWin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(jPanelTCPLayout.createSequentialGroup()
												.addGap(18, 18, 18)
												.addGroup(jPanelTCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jCheckBoxTCPEditChecksum)
														.addComponent(jTextFieldTCPEditChecksum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButtonAddTCP)
								.addContainerGap())
		);

		jTabbedPane1.addTab("TCP", jPanelTCP);

		jButtonSendEcho.setText("Отправить");
		jButtonSendEcho.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendEchoActionPerformed(evt);
			}
		});

		jLabelEchoICMPID.setText("ID");

		jTextFieldICMPID.setText("65535");

		jLabelICMPSequence.setText("Sequence");

		jTextFieldICMPSequence.setText("0");

		jLabelICMPSendData.setText("Send data Length");

		jTextFieldICMPSendData.setText("56");

		buttonGroupICMPType.add(jRadioButtonEchoReply);
		jRadioButtonEchoReply.setSelected(true);
		jRadioButtonEchoReply.setText("Echo reply");

		buttonGroupICMPType.add(jRadioButtonEchoRequest);
		jRadioButtonEchoRequest.setText("Echo Request");

		jLabelICMPHeaderLength.setText("ICMP header length");

		jTextFieldICMPHeaderLength.setText("2");

		jCheckBoxICMPChecksum.setSelected(true);
		jCheckBoxICMPChecksum.setText("Checksum");

		jButtonICMPtoHex.setText("ToHex");
		jButtonICMPtoHex.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonICMPtoHexActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanelICMPLayout = new javax.swing.GroupLayout(jPanelICMP);
		jPanelICMP.setLayout(jPanelICMPLayout);
		jPanelICMPLayout.setHorizontalGroup(
				jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanelICMPLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabelICMPSequence)
										.addComponent(jLabelEchoICMPID)
										.addComponent(jLabelICMPSendData)
										.addComponent(jLabelICMPHeaderLength))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
										.addComponent(jTextFieldICMPSendData, javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jTextFieldICMPSequence, javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jTextFieldICMPID, javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jTextFieldICMPHeaderLength))
								.addGap(68, 68, 68)
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jRadioButtonEchoReply)
										.addComponent(jRadioButtonEchoRequest)
										.addComponent(jCheckBoxICMPChecksum))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jButtonSendEcho)
										.addComponent(jButtonICMPtoHex))
								.addContainerGap())
		);
		jPanelICMPLayout.setVerticalGroup(
				jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelICMPLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelEchoICMPID)
										.addComponent(jTextFieldICMPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jRadioButtonEchoReply)
										.addComponent(jButtonSendEcho))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelICMPSequence)
										.addComponent(jTextFieldICMPSequence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jRadioButtonEchoRequest)
										.addComponent(jButtonICMPtoHex))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelICMPSendData)
										.addComponent(jTextFieldICMPSendData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jCheckBoxICMPChecksum))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanelICMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabelICMPHeaderLength)
										.addComponent(jTextFieldICMPHeaderLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(102, Short.MAX_VALUE))
		);

		jTabbedPane1.addTab("ICMP", jPanelICMP);

		jLabelSrcIP.setText("ip источника");

		jTextFieldSrcIP.setText("192.168.56.1");
		jTextFieldSrcIP.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldSrcIPActionPerformed(evt);
			}
		});

		jLabelDstIP.setText("ip назначения");

		jTextFieldDstIP.setText("192.168.56.101");
		jTextFieldDstIP.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldDstIPActionPerformed(evt);
			}
		});

		jCheckBoxSetIP.setSelected(true);
		jCheckBoxSetIP.setText("Установить ip");

		jLabelIPflags.setText("ipflags");

		jCheckBoxReservedBit.setText("Reserved bit");

		jCheckBoxDontFragment.setText("Don't fragment");

		jCheckBoxMoreFragments.setText("More fragments");

		jLabelFragmentOffset.setText("Смещение фрагмента");

		jLabelTTL.setText("TTL");

		jTextFieldTTL.setText("5");

		jTextFieldFragmentOffset.setText("0");

		jLabelIPHeaderLength.setText("Длина заголовка");

		jTextFieldIPHeaderLength.setText("5");

		jCheckBoxIPChecksum.setSelected(true);
		jCheckBoxIPChecksum.setText("Checksum");

		jLabelData.setText("Данные");

		jTextAreaData.setColumns(20);
		jTextAreaData.setRows(5);
		jTextAreaData.setText("SPAM SPAM SPAM spam spam spam");
		jScrollPane1.setViewportView(jTextAreaData);

		jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

		jLabelNetwork.setText("Network");

		jLabelTransport.setText("Transport");

		jLabelPayload.setText("Data");

		jTextAreaNetwork.setColumns(20);
		jTextAreaNetwork.setRows(5);
		jScrollPane3.setViewportView(jTextAreaNetwork);

		jTextAreaTransport.setColumns(20);
		jTextAreaTransport.setRows(5);
		jScrollPane4.setViewportView(jTextAreaTransport);

		jTextAreaPayload.setColumns(20);
		jTextAreaPayload.setRows(5);
		jScrollPane5.setViewportView(jTextAreaPayload);

		jButtonSendHex.setText("Send Hex");
		jButtonSendHex.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendHexActionPerformed(evt);
			}
		});

		jButtonClearSequence.setText("Очистить очередь");
		jButtonClearSequence.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonClearSequenceActionPerformed(evt);
			}
		});

		jButtonSendSequence.setText("Отправить очередь");
		jButtonSendSequence.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendSequenceActionPerformed(evt);
			}
		});

		jButtonSaveList.setText("Записать в файл");
		jButtonSaveList.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSaveListActionPerformed(evt);
			}
		});

		jButtonReadList.setText("Прочитать фалй");
		jButtonReadList.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonReadListActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabelData)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabelIPHeaderLength)
														.addComponent(jLabelDstIP)
														.addComponent(jLabelSrcIP))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
														.addComponent(jTextFieldSrcIP)
														.addComponent(jTextFieldDstIP)
														.addComponent(jTextFieldIPHeaderLength))
												.addGap(18, 18, 18)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jCheckBoxDontFragment)
														.addComponent(jCheckBoxMoreFragments)
														.addComponent(jCheckBoxReservedBit)))
										.addGroup(layout.createSequentialGroup()
												.addComponent(jCheckBoxSetIP)
												.addGap(136, 136, 136)
												.addComponent(jLabelIPflags))
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jCheckBoxIPChecksum)
														.addGroup(layout.createSequentialGroup()
																.addComponent(jLabelTTL)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(jTextFieldTTL, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
														.addComponent(jLabelFragmentOffset)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(jTextFieldFragmentOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(18, 18, 18)
								.addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(layout.createSequentialGroup()
																		.addComponent(jLabelTransport)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
																.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
																		.addComponent(jLabelNetwork)
																		.addGap(28, 28, 28)))
														.addComponent(jLabelPayload))
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jButtonSendHex)))
										.addComponent(jButtonClearSequence)
										.addComponent(jButtonSendSequence)
										.addComponent(jButtonSaveList)
										.addComponent(jButtonReadList))
								.addContainerGap(163, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jCheckBoxSetIP)
										.addComponent(jLabelIPflags, javax.swing.GroupLayout.Alignment.TRAILING))
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(layout.createSequentialGroup()
																.addComponent(jLabelSrcIP)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jLabelDstIP)
																.addGap(4, 4, 4))
														.addGroup(layout.createSequentialGroup()
																.addComponent(jTextFieldSrcIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jTextFieldDstIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabelIPHeaderLength)
														.addComponent(jTextFieldIPHeaderLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(layout.createSequentialGroup()
												.addGap(12, 12, 12)
												.addComponent(jCheckBoxReservedBit)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jCheckBoxDontFragment)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jCheckBoxMoreFragments)))
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabelFragmentOffset)
												.addComponent(jTextFieldFragmentOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addGap(25, 25, 25)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabelTTL)
														.addComponent(jTextFieldTTL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jCheckBoxIPChecksum)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jTabbedPane1)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabelData)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap())
						.addComponent(jSeparator1)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabelNetwork))
								.addGap(18, 18, 18)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabelTransport))
								.addGap(18, 18, 18)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabelPayload))
								.addGap(18, 18, 18)
								.addComponent(jButtonSendHex)
								.addGap(59, 59, 59)
								.addComponent(jButtonClearSequence)
								.addGap(18, 18, 18)
								.addComponent(jButtonSendSequence)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jButtonSaveList)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jButtonReadList)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jTextFieldSrcIPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldSrcIPActionPerformed
	{//GEN-HEADEREND:event_jTextFieldSrcIPActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_jTextFieldSrcIPActionPerformed

	private void jTextFieldDstIPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldDstIPActionPerformed
	{//GEN-HEADEREND:event_jTextFieldDstIPActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_jTextFieldDstIPActionPerformed

	public ICMPEchoPacket CreateICMP() {
		byte[] payload = jTextAreaData.getText().getBytes();

		ICMPEchoPacket pack = new ICMPEchoPacket(payload.length + 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + 4 * Integer.parseInt(jTextFieldICMPHeaderLength.getText()));
		pack.setIPVersion(4);

		pack.setIPHeaderLength(Integer.parseInt(jTextFieldIPHeaderLength.getText()));

		pack.setProtocol(IPPacket.PROTOCOL_ICMP);

		pack.setTTL(Integer.parseInt(jTextFieldTTL.getText()));

		if (jCheckBoxSetIP.isSelected()) {
			try {
				// Convert from an IPv4 address to an integer
				InetAddress dst = InetAddress.getByName(jTextFieldDstIP.getText());
				int intdst = ByteBuffer.wrap(dst.getAddress()).getInt();

				InetAddress src = InetAddress.getByName(jTextFieldSrcIP.getText());
				int intsrc = ByteBuffer.wrap(src.getAddress()).getInt();

				pack.setDestinationAsWord(intdst); /*2130706433 == 127.0.0.1*/

				pack.setSourceAsWord(intsrc);
			} catch (UnknownHostException ex) {
				Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		int ipflags = 0;
		if (jCheckBoxReservedBit.isSelected()) {
			ipflags = ipflags | Integer.parseInt("100", 2);
		}
		if (jCheckBoxDontFragment.isSelected()) {
			ipflags = ipflags | Integer.parseInt("10", 2);
		}
		if (jCheckBoxMoreFragments.isSelected()) {
			ipflags = ipflags | Integer.parseInt("1", 2);
		}
		pack.setIPFlags(ipflags);

		pack.setFragmentOffset(Integer.parseInt(jTextFieldFragmentOffset.getText()));

		//pack.setDestinationPort(Integer.parseInt(jTextFieldUDPDstPort.getText()));
		//pack.setSourcePort(Integer.parseInt(jTextFieldUDPSrcPort.getText()));
		pack.setSequenceNumber(Integer.parseInt(jTextFieldICMPSequence.getText()));

		//pack.setUDPDataByteLength(payload.length);
		pack.setICMPDataByteLength(payload.length);
		//pack.setUDPPacketLength(payload.length + Integer.parseInt(jTextFieldUDPHeaderLength.getText()));
		//pack.setUDPPacketLength(4 * Integer.parseInt(jTextFieldUDPHeaderLength.getText()) + payload.length);

		pack.setIdentifier(Integer.parseInt(jTextFieldICMPID.getText()));
		//pack.setType(ICMPEchoPacket.TYPE_ECHO_REPLY);

		if (jRadioButtonEchoReply.isSelected()) {
			pack.setType(ICMPEchoPacket.TYPE_ECHO_REPLY);
		} else {
			pack.setType(ICMPEchoPacket.TYPE_ECHO_REQUEST);
		}

		byte[] buffer = new byte[pack.size()];
		pack.getData(buffer);
		//System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPheaderLength.getText()) + 4 * Integer.parseInt(jTextFieldUDPHeaderLength.getText()), payload.length);
		System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + 4 * Integer.parseInt(jTextFieldICMPHeaderLength.getText()), payload.length);
		pack.setData(buffer);
		//pack.computeUDPChecksum(true);

		if (jCheckBoxICMPChecksum.isSelected()) {
			pack.computeICMPChecksum(true);
		}
		if (jCheckBoxIPChecksum.isSelected()) {
			pack.computeIPChecksum(true);
		}
		return pack;
	}

	private void jButtonSendEchoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSendEchoActionPerformed
	{//GEN-HEADEREND:event_jButtonSendEchoActionPerformed
		try {
			ICMPEchoPacket pack = CreateICMP();
//            pack.getData(buffer);
//
//            RawSocket rs = new RawSocket();
//            rs.open(RawSocket.PF_INET, RawSocket.getProtocolByName("ICMP"));
//            rs.setIPHeaderInclude(true);
//            rs.write(InetAddress.getByName(jTextFieldDstIP.getText()), buffer);
//            rs.close();
			SendPack(pack, "ICMP");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}//GEN-LAST:event_jButtonSendEchoActionPerformed

	public UDPPacket CreateUDP() {
		byte[] payload = jTextAreaData.getText().getBytes();

		UDPPacket pack = new UDPPacket(payload.length + 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + Integer.parseInt(jTextFieldUDPHeaderLength.getText()));
		pack.setIPVersion(4);

		pack.setIPHeaderLength(Integer.parseInt(jTextFieldIPHeaderLength.getText()));

		pack.setProtocol(IPPacket.PROTOCOL_UDP);

		pack.setTTL(Integer.parseInt(jTextFieldTTL.getText()));

		if (jCheckBoxSetIP.isSelected()) {
			try {
				// Convert from an IPv4 address to an integer
				InetAddress dst = InetAddress.getByName(jTextFieldDstIP.getText());
				int intdst = ByteBuffer.wrap(dst.getAddress()).getInt();

				InetAddress src = InetAddress.getByName(jTextFieldSrcIP.getText());
				int intsrc = ByteBuffer.wrap(src.getAddress()).getInt();

				pack.setDestinationAsWord(intdst); /*2130706433 == 127.0.0.1*/

				pack.setSourceAsWord(intsrc);
			} catch (UnknownHostException ex) {
				Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		int ipflags = 0;
		if (jCheckBoxReservedBit.isSelected()) {
			ipflags = ipflags | Integer.parseInt("100", 2);
		}
		if (jCheckBoxDontFragment.isSelected()) {
			ipflags = ipflags | Integer.parseInt("10", 2);
		}
		if (jCheckBoxMoreFragments.isSelected()) {
			ipflags = ipflags | Integer.parseInt("1", 2);
		}
		pack.setIPFlags(ipflags);

		pack.setFragmentOffset(Integer.parseInt(jTextFieldFragmentOffset.getText()));

		pack.setDestinationPort(Integer.parseInt(jTextFieldUDPDstPort.getText()));
		pack.setSourcePort(Integer.parseInt(jTextFieldUDPSrcPort.getText()));

		pack.setUDPDataByteLength(payload.length);
		pack.setUDPPacketLength(Integer.parseInt(jTextFieldUDPHeaderLength.getText()) + payload.length);

		byte[] buffer = new byte[pack.size()];
		pack.getData(buffer);
		System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + Integer.parseInt(jTextFieldUDPHeaderLength.getText()), payload.length);
		pack.setData(buffer);

		pack.computeUDPChecksum(true);
		pack.computeIPChecksum(true);

		return pack;
	}

	public void SendPack(IPPacket pack, String proto) {
		try {
			byte[] buffer = new byte[pack.size()];
			pack.getData(buffer);

			RawSocket rs = new RawSocket();
			rs.open(RawSocket.PF_INET, RawSocket.getProtocolByName(proto));
			rs.setIPHeaderInclude(true);
//            if (jCheckBoxByteLength.isSelected())
//            {
//                byte[] tmp = new byte[Integer.parseInt(jTextFieldByteLength.getText())];
//                for (int i = 0; i < tmp.length && i < buffer.length; i++)
//                {
//                    tmp[i] = buffer[i];
//                }
//                rs.write(InetAddress.getByName(jTextFieldDstIP.getText()), tmp);
//            }
//            else
//            {
			rs.write(InetAddress.getByName(jTextFieldDstIP.getText()), buffer);
//            }
			rs.close();
		} catch (IllegalStateException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void jButtonSendUDPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSendUDPActionPerformed
	{//GEN-HEADEREND:event_jButtonSendUDPActionPerformed

		UDPPacket pack = CreateUDP();
		SendPack(pack, "udp");
	}//GEN-LAST:event_jButtonSendUDPActionPerformed

	public TCPPacket CreateTCP() {
		byte[] payload = jTextAreaData.getText().getBytes();

		TCPPacket pack = new TCPPacket(payload.length + 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + 4 * Integer.parseInt(jTextFieldTCPHeaderLength.getText()));

		if (jCheckBoxSetIP.isSelected()) {
			try {
				// Convert from an IPv4 address to an integer
				InetAddress dst = InetAddress.getByName(jTextFieldDstIP.getText());
				int intdst = ByteBuffer.wrap(dst.getAddress()).getInt();

				InetAddress src = InetAddress.getByName(jTextFieldSrcIP.getText());
				int intsrc = ByteBuffer.wrap(src.getAddress()).getInt();

				pack.setDestinationAsWord(intdst); /*2130706433 == 127.0.0.1*/

				pack.setSourceAsWord(intsrc);
			} catch (UnknownHostException ex) {
				Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		pack.setProtocol(IPPacket.PROTOCOL_TCP);

		pack.setIPHeaderLength(Integer.parseInt(jTextFieldIPHeaderLength.getText()));

		pack.setTCPDataByteLength(payload.length);

		pack.setTCPHeaderLength(Integer.parseInt(jTextFieldTCPHeaderLength.getText()));

		pack.setFragmentOffset(Integer.parseInt(jTextFieldFragmentOffset.getText()));

		pack.setDestinationPort(Integer.parseInt(jTextFieldTCPDstPort.getText()));

		pack.setSourcePort(Integer.parseInt(jTextFieldTCPSrcPort.getText()));

		pack.setAckNumber(Integer.parseInt(jTextFieldACKnumber.getText()));

		pack.setSequenceNumber(Integer.parseInt(jTextFieldSeq.getText()));

		pack.setWindowSize(Integer.parseInt(jTextFieldWin.getText()));

		pack.setIPVersion(4);

		byte[] buffer = new byte[pack.size()];
		pack.getData(buffer);

		System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + 4 * Integer.parseInt(jTextFieldTCPHeaderLength.getText()), payload.length);
		pack.setData(buffer);

		int flags = 0;
		if (jCheckBoxACK.isSelected()) {
			flags |= TCPPacket.MASK_ACK;
		}
		if (jCheckBoxFIN.isSelected()) {
			flags |= TCPPacket.MASK_FIN;
		}
		if (jCheckBoxPUSH.isSelected()) {
			flags |= TCPPacket.MASK_PSH;
		}
		if (jCheckBoxRST.isSelected()) {
			flags |= TCPPacket.MASK_RST;
		}
		if (jCheckBoxSYN.isSelected()) {
			flags |= TCPPacket.MASK_SYN;
		}
		if (jCheckBoxURG.isSelected()) {
			flags |= TCPPacket.MASK_URG;
		}
		pack.addControlFlags(flags);

		pack.setTTL(Integer.parseInt(jTextFieldTTL.getText()));

		int ipflags = 0;
		if (jCheckBoxReservedBit.isSelected()) {
			ipflags = ipflags | Integer.parseInt("100", 2);
		}
		if (jCheckBoxDontFragment.isSelected()) {
			ipflags = ipflags | Integer.parseInt("10", 2);
		}
		if (jCheckBoxMoreFragments.isSelected()) {
			ipflags = ipflags | Integer.parseInt("1", 2);
		}
		pack.setIPFlags(ipflags);

		pack.computeIPChecksum(true);
		pack.computeTCPChecksum(true);
		pack.setCheckSum(true, Integer.parseInt(jTextFieldTCPEditChecksum.getText(), 16));
		return pack;
	}

	private void jButtonSendTCPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSendTCPActionPerformed
	{//GEN-HEADEREND:event_jButtonSendTCPActionPerformed
		try {
			if (jCheckBoxTCPEditChecksum.isSelected()) {

				TCPPacket pack = CreateTCP();
				SendPack(pack, "TCP");
			} else {
				String src, dst, flags, frag, ttl, proto, sport, dport, seq, ack, tcpflags, window, load;

				src = jTextFieldSrcIP.getText();
				dst = jTextFieldDstIP.getText();
				frag = jTextFieldFragmentOffset.getText();
				ttl = jTextFieldTTL.getText();
				proto = "tcp";
				sport = jTextFieldTCPSrcPort.getText();
				dport = jTextFieldTCPDstPort.getText();
				seq = jTextFieldSeq.getText();
				ack = jTextFieldACKnumber.getText();
				window = jTextFieldWin.getText();

				int ipflags = 0;
				if (jCheckBoxReservedBit.isSelected()) {
					ipflags = ipflags | Integer.parseInt("100", 2);
				}
				if (jCheckBoxDontFragment.isSelected()) {
					ipflags = ipflags | Integer.parseInt("10", 2);
				}
				if (jCheckBoxMoreFragments.isSelected()) {
					ipflags = ipflags | Integer.parseInt("1", 2);
				}
				flags = String.valueOf(ipflags);

				int tflags = 0;
				if (jCheckBoxACK.isSelected()) {
					tflags |= TCPPacket.MASK_ACK;
				}
				if (jCheckBoxFIN.isSelected()) {
					tflags |= TCPPacket.MASK_FIN;
				}
				if (jCheckBoxPUSH.isSelected()) {
					tflags |= TCPPacket.MASK_PSH;
				}
				if (jCheckBoxRST.isSelected()) {
					tflags |= TCPPacket.MASK_RST;
				}
				if (jCheckBoxSYN.isSelected()) {
					tflags |= TCPPacket.MASK_SYN;
				}
				if (jCheckBoxURG.isSelected()) {
					tflags |= TCPPacket.MASK_URG;
				}
				tcpflags = String.valueOf(tflags);

				load = jTextAreaData.getText();

//                Process p = Runtime.getRuntime().exec("python tcp.py 192.168.56.101");
				String comand = "python tcp.py " + src + " " + dst + " " + flags
						+ " " + frag + " " + ttl + " " + proto + " " + sport + " " + dport + " " + seq
						+ " " + ack + " " + tcpflags + " " + window + " \"" + load + "\"";
				System.out.println(comand);
//                Process p = Runtime.getRuntime().exec(comand);
				Process p = Runtime.getRuntime().exec(new String[]
						{
								"python", "tcp.py", src, dst, flags, frag, ttl, proto, sport, dport, seq, ack, tcpflags, window, load
						});

				InputStream stdout = p.getInputStream();
				InputStream stderr = p.getErrorStream();
				InputStreamReader isr = new InputStreamReader(stdout);
				InputStreamReader isrerr = new InputStreamReader(stderr);
				BufferedReader br = new BufferedReader(isr);
				BufferedReader brerr = new BufferedReader(isrerr);

				String line = null;

				System.out.println("OUTPUT:");
				while ((line = br.readLine()) != null) {
					System.out.println(line);
				}
				System.out.println();

				System.out.println("ERROR:");
				while ((line = brerr.readLine()) != null) {
					System.out.println(line);
				}
				System.out.println();

				p.waitFor();
			}
		} catch (IllegalStateException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_jButtonSendTCPActionPerformed

	private void jButtonTCPtoHexActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonTCPtoHexActionPerformed
	{//GEN-HEADEREND:event_jButtonTCPtoHexActionPerformed
		TCPPacket pack = CreateTCP();
		byte[] buffer = new byte[pack.size()];
		pack.getData(buffer);

		byte[] Network = new byte[pack.getIPHeaderByteLength()];
		byte[] Transport = new byte[pack.getTCPHeaderByteLength()];
//        byte[] Data = new byte[pack.getTCPDataByteLength()];
		byte[] Data = new byte[pack.size() - pack.getIPHeaderByteLength() - pack.getTCPHeaderByteLength()];

		System.arraycopy(buffer, 0, Network, 0, Network.length);
		System.arraycopy(buffer, Network.length, Transport, 0, Transport.length);
		System.arraycopy(buffer, Network.length + Transport.length, Data, 0, Data.length);

		jTextAreaNetwork.setLineWrap(true);
		jTextAreaNetwork.setText(printHexBinary(Network));

		jTextAreaTransport.setLineWrap(true);
		jTextAreaTransport.setText(printHexBinary(Transport));

		jTextAreaPayload.setLineWrap(true);
		jTextAreaPayload.setText(printHexBinary(Data));
	}//GEN-LAST:event_jButtonTCPtoHexActionPerformed

	private void jButtonUDPtoHexActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonUDPtoHexActionPerformed
	{//GEN-HEADEREND:event_jButtonUDPtoHexActionPerformed
		// TODO add your handling code here:
		UDPPacket pack = CreateUDP();
		byte[] buffer = new byte[pack.size()];
		pack.getData(buffer);
//        String hex = printHexBinary(buffer);
//        jTextAreaHex.setLineWrap(true);
//        jTextAreaHex.setText(hex);

		byte[] Network = new byte[pack.getIPHeaderByteLength()];
		byte[] Transport = new byte[pack.getUDPPacketByteLength() - pack.getUDPDataByteLength()];
		byte[] Data = new byte[pack.getUDPDataByteLength()];
//        System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + 4 * Integer.parseInt(jTextFieldTCPHeaderLength.getText()), payload.length);

		System.arraycopy(buffer, 0, Network, 0, Network.length);
		System.arraycopy(buffer, Network.length, Transport, 0, Transport.length);
		System.arraycopy(buffer, Network.length + Transport.length, Data, 0, Data.length);

		jTextAreaNetwork.setLineWrap(true);
		jTextAreaNetwork.setText(printHexBinary(Network));

		jTextAreaTransport.setLineWrap(true);
		jTextAreaTransport.setText(printHexBinary(Transport));

		jTextAreaPayload.setLineWrap(true);
		jTextAreaPayload.setText(printHexBinary(Data));

	}//GEN-LAST:event_jButtonUDPtoHexActionPerformed

	public static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
					+ Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}

	private void jButtonSendHexActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSendHexActionPerformed
	{//GEN-HEADEREND:event_jButtonSendHexActionPerformed
		// TODO add your handling code here:
		String sNetwork = jTextAreaNetwork.getText();
		String sTransport = jTextAreaTransport.getText();
		String sData = jTextAreaPayload.getText();
		if ((sNetwork.length() % 2 == 0) && (sTransport.length() % 2 == 0) && (sData.length() % 2 == 0)) {
			try {
				byte[] buffer = new byte[(sNetwork.length() + sTransport.length() + sData.length()) / 2];
				byte[] network = hexStringToByteArray(sNetwork);
				byte[] transport = hexStringToByteArray(sTransport);
				byte[] data = hexStringToByteArray(sData);

//            System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPHeaderLength.getText()) + Integer.parseInt(jTextFieldUDPHeaderLength.getText()), payload.length);
				System.arraycopy(network, 0, buffer, 0, network.length);
				System.arraycopy(transport, 0, buffer, network.length, transport.length);
				System.arraycopy(data, 0, buffer, network.length + transport.length, data.length);

				RawSocket rs = new RawSocket();
				System.out.println(jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()));
				rs.open(RawSocket.PF_INET, RawSocket.getProtocolByName(jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex())));
				rs.setIPHeaderInclude(true);

				rs.write(InetAddress.getByName(jTextFieldDstIP.getText()), buffer);

				rs.close();
			} catch (IllegalStateException ex) {
				Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
			} catch (IOException ex) {
				Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		} else {
			System.err.println("Not parsed");
		}
	}//GEN-LAST:event_jButtonSendHexActionPerformed

	private void jButtonICMPtoHexActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonICMPtoHexActionPerformed
	{//GEN-HEADEREND:event_jButtonICMPtoHexActionPerformed
		// TODO add your handling code here:
		ICMPEchoPacket pack = CreateICMP();
		byte[] buffer = new byte[pack.size()];
		pack.getData(buffer);

		byte[] Network = new byte[pack.getIPHeaderByteLength()];
		byte[] Transport = new byte[pack.getICMPHeaderByteLength()];
//        byte[] Data = new byte[pack.getTCPDataByteLength()];
		byte[] Data = new byte[pack.size() - pack.getIPHeaderByteLength() - pack.getICMPHeaderByteLength()];

		System.arraycopy(buffer, 0, Network, 0, Network.length);
		System.arraycopy(buffer, Network.length, Transport, 0, Transport.length);
		System.arraycopy(buffer, Network.length + Transport.length, Data, 0, Data.length);

		jTextAreaNetwork.setLineWrap(true);
		jTextAreaNetwork.setText(printHexBinary(Network));

		jTextAreaTransport.setLineWrap(true);
		jTextAreaTransport.setText(printHexBinary(Transport));

		jTextAreaPayload.setLineWrap(true);
		jTextAreaPayload.setText(printHexBinary(Data));
	}//GEN-LAST:event_jButtonICMPtoHexActionPerformed

	private void jButtonAddTCPActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddTCPActionPerformed
	{//GEN-HEADEREND:event_jButtonAddTCPActionPerformed
		try {
			String src, dst, flags, frag, ttl, proto, sport, dport, seq, ack, tcpflags, window, load;
			src = jTextFieldSrcIP.getText();
			dst = jTextFieldDstIP.getText();
			frag = jTextFieldFragmentOffset.getText();
			ttl = jTextFieldTTL.getText();
			proto = "tcp";
			sport = jTextFieldTCPSrcPort.getText();
			dport = jTextFieldTCPDstPort.getText();
			seq = jTextFieldSeq.getText();
			ack = jTextFieldACKnumber.getText();
			window = jTextFieldWin.getText();
			int ipflags = 0;
			if (jCheckBoxReservedBit.isSelected()) {
				ipflags = ipflags | Integer.parseInt("100", 2);
			}
			if (jCheckBoxDontFragment.isSelected()) {
				ipflags = ipflags | Integer.parseInt("10", 2);
			}
			if (jCheckBoxMoreFragments.isSelected()) {
				ipflags = ipflags | Integer.parseInt("1", 2);
			}
			flags = String.valueOf(ipflags);
			int tflags = 0;
			if (jCheckBoxACK.isSelected()) {
				tflags |= TCPPacket.MASK_ACK;
			}
			if (jCheckBoxFIN.isSelected()) {
				tflags |= TCPPacket.MASK_FIN;
			}
			if (jCheckBoxPUSH.isSelected()) {
				tflags |= TCPPacket.MASK_PSH;
			}
			if (jCheckBoxRST.isSelected()) {
				tflags |= TCPPacket.MASK_RST;
			}
			if (jCheckBoxSYN.isSelected()) {
				tflags |= TCPPacket.MASK_SYN;
			}
			if (jCheckBoxURG.isSelected()) {
				tflags |= TCPPacket.MASK_URG;
			}
			tcpflags = String.valueOf(tflags);
			load = jTextAreaData.getText();
			//                Process p = Runtime.getRuntime().exec("python tcp.py 192.168.56.101");
			String comand = "python tcp.py " + src + " " + dst + " " + flags
					+ " " + frag + " " + ttl + " " + proto + " " + sport + " " + dport + " " + seq
					+ " " + ack + " " + tcpflags + " " + window + " \"" + load + "\"";
			System.out.println(comand);
			//                Process p = Runtime.getRuntime().exec(comand);
			Process p = Runtime.getRuntime().exec(new String[]
					{
							"python", "hexpack.py", src, dst, flags, frag, ttl, proto, sport, dport, seq, ack, tcpflags, window, load
					});
			InputStream stdout = p.getInputStream();
			InputStream stderr = p.getErrorStream();
			InputStreamReader isr = new InputStreamReader(stdout);
			InputStreamReader isrerr = new InputStreamReader(stderr);
			BufferedReader br = new BufferedReader(isr);
			BufferedReader brerr = new BufferedReader(isrerr);
			String line = null;
			System.out.println("OUTPUT:");
			while ((line = br.readLine()) != null) {
				System.out.println(line);
			}
			System.out.println();
			System.out.println("ERROR:");
			while ((line = brerr.readLine()) != null) {
				System.out.println(line);
			}
			System.out.println();
			p.waitFor();

			TCPPacket pack = ReadFromHexFile("hexpack.tmp");
			list.add(pack);
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_jButtonAddTCPActionPerformed

	private void jButtonSendSequenceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSendSequenceActionPerformed
	{//GEN-HEADEREND:event_jButtonSendSequenceActionPerformed
		// TODO add your handling code here:
		for (IPPacket pack : list) {
			SendPack(pack, "TCP");
		}
	}//GEN-LAST:event_jButtonSendSequenceActionPerformed

	private void jButtonClearSequenceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonClearSequenceActionPerformed
	{//GEN-HEADEREND:event_jButtonClearSequenceActionPerformed
		// TODO add your handling code here:
		list.clear();
	}//GEN-LAST:event_jButtonClearSequenceActionPerformed

	private void jButtonSaveListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveListActionPerformed
	{//GEN-HEADEREND:event_jButtonSaveListActionPerformed
		try {
			List<String> stringlist = new ArrayList<>();
			for (IPPacket pack : list) {
				byte[] buffer = new byte[pack.size()];
				pack.getData(buffer);
				stringlist.add(printHexBinary(buffer));
			}
			ObjectOutputStream oos;
			oos = new ObjectOutputStream(new FileOutputStream("hexlist"));
			oos.writeObject(stringlist);
			oos.close();
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_jButtonSaveListActionPerformed

	private void jButtonReadListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonReadListActionPerformed
	{//GEN-HEADEREND:event_jButtonReadListActionPerformed
		FileInputStream fis = null;
		List<String> stringlist = new ArrayList<>();
		try {
			// TODO add your handling code here:
			fis = new FileInputStream("hexlist");
			ObjectInputStream read = new ObjectInputStream(fis); //пытаемся прочитать объект
			if ((stringlist = (List<String>) read.readObject()) != null) {
				System.out.println("Read " + stringlist.size() + " packets");
			}
			for (String stringlist1 : stringlist) {
				TCPPacket pack = new TCPPacket(stringlist1.length() / 2);
				pack.setData(hexStringToByteArray(stringlist1));
				list.add(pack);
			}

		} catch (FileNotFoundException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			try {
				fis.close();
			} catch (IOException ex) {
				Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}//GEN-LAST:event_jButtonReadListActionPerformed

	private int computeChecksum(byte[] buf) {
		int length = buf.length;
		int i = 0;
		int sum = 0;
		long data;

		// loop through all 16-bit words unless there's 0 or 1 byte left.
		while (length > 1) {
			data = (((buf[i] << 8) & 0xFF00) | ((buf[i + 1]) & 0xFF));
			sum += data;
			if ((sum & 0xFFFF0000) > 0) {
				sum = sum & 0xFFFF;
				sum += 1;
			}
			i += 2;
			length -= 2;
		}

		if (length > 0) { // ie. there are 8 bits of data remaining.
			sum += (buf[i] << 8 & 0xFF00); // create a 16 bit word where the 8 lsb are 0's and add it to the sum.
			if ((sum & 0xFFFF0000) > 0) {
				sum = sum & 0xFFFF;
				sum += 1;
			}
		}

		sum = ~sum;
		sum = sum & 0xFFFF;
		return sum;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

        /* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainJFrame().setVisible(true);
			}
		});
	}

	private List<IPPacket> list = new ArrayList<>();
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup buttonGroupICMPType;
	private javax.swing.JButton jButtonAddTCP;
	private javax.swing.JButton jButtonClearSequence;
	private javax.swing.JButton jButtonICMPtoHex;
	private javax.swing.JButton jButtonReadList;
	private javax.swing.JButton jButtonSaveList;
	private javax.swing.JButton jButtonSendEcho;
	private javax.swing.JButton jButtonSendHex;
	private javax.swing.JButton jButtonSendSequence;
	private javax.swing.JButton jButtonSendTCP;
	private javax.swing.JButton jButtonSendUDP;
	private javax.swing.JButton jButtonTCPtoHex;
	private javax.swing.JButton jButtonUDPtoHex;
	private javax.swing.JCheckBox jCheckBoxACK;
	private javax.swing.JCheckBox jCheckBoxDontFragment;
	private javax.swing.JCheckBox jCheckBoxFIN;
	private javax.swing.JCheckBox jCheckBoxICMPChecksum;
	private javax.swing.JCheckBox jCheckBoxIPChecksum;
	private javax.swing.JCheckBox jCheckBoxMoreFragments;
	private javax.swing.JCheckBox jCheckBoxPUSH;
	private javax.swing.JCheckBox jCheckBoxRST;
	private javax.swing.JCheckBox jCheckBoxReservedBit;
	private javax.swing.JCheckBox jCheckBoxSYN;
	private javax.swing.JCheckBox jCheckBoxSetIP;
	private javax.swing.JCheckBox jCheckBoxTCPEditChecksum;
	private javax.swing.JCheckBox jCheckBoxURG;
	private javax.swing.JLabel jLabelACKnumber;
	private javax.swing.JLabel jLabelData;
	private javax.swing.JLabel jLabelDstIP;
	private javax.swing.JLabel jLabelEchoICMPID;
	private javax.swing.JLabel jLabelFlags;
	private javax.swing.JLabel jLabelFragmentOffset;
	private javax.swing.JLabel jLabelICMPHeaderLength;
	private javax.swing.JLabel jLabelICMPSendData;
	private javax.swing.JLabel jLabelICMPSequence;
	private javax.swing.JLabel jLabelIPHeaderLength;
	private javax.swing.JLabel jLabelIPflags;
	private javax.swing.JLabel jLabelNetwork;
	private javax.swing.JLabel jLabelPayload;
	private javax.swing.JLabel jLabelSeq;
	private javax.swing.JLabel jLabelSrcIP;
	private javax.swing.JLabel jLabelTCPDstPort;
	private javax.swing.JLabel jLabelTCPHeaderLength;
	private javax.swing.JLabel jLabelTCPSrcPort;
	private javax.swing.JLabel jLabelTTL;
	private javax.swing.JLabel jLabelTransport;
	private javax.swing.JLabel jLabelUDPDstPort;
	private javax.swing.JLabel jLabelUDPHeaderLength;
	private javax.swing.JLabel jLabelUDPSrcPort;
	private javax.swing.JLabel jLabelWin;
	private javax.swing.JPanel jPanelICMP;
	private javax.swing.JPanel jPanelTCP;
	private javax.swing.JPanel jPanelUDP;
	private javax.swing.JRadioButton jRadioButtonEchoReply;
	private javax.swing.JRadioButton jRadioButtonEchoRequest;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTextArea jTextAreaData;
	private javax.swing.JTextArea jTextAreaNetwork;
	private javax.swing.JTextArea jTextAreaPayload;
	private javax.swing.JTextArea jTextAreaTransport;
	private javax.swing.JTextField jTextFieldACKnumber;
	private javax.swing.JTextField jTextFieldDstIP;
	private javax.swing.JTextField jTextFieldFragmentOffset;
	private javax.swing.JTextField jTextFieldICMPHeaderLength;
	private javax.swing.JTextField jTextFieldICMPID;
	private javax.swing.JTextField jTextFieldICMPSendData;
	private javax.swing.JTextField jTextFieldICMPSequence;
	private javax.swing.JTextField jTextFieldIPHeaderLength;
	private javax.swing.JTextField jTextFieldSeq;
	private javax.swing.JTextField jTextFieldSrcIP;
	private javax.swing.JTextField jTextFieldTCPDstPort;
	private javax.swing.JTextField jTextFieldTCPEditChecksum;
	private javax.swing.JTextField jTextFieldTCPHeaderLength;
	private javax.swing.JTextField jTextFieldTCPSrcPort;
	private javax.swing.JTextField jTextFieldTTL;
	private javax.swing.JTextField jTextFieldUDPDstPort;
	private javax.swing.JTextField jTextFieldUDPHeaderLength;
	private javax.swing.JTextField jTextFieldUDPSrcPort;
	private javax.swing.JTextField jTextFieldWin;
	// End of variables declaration//GEN-END:variables

	private byte[] GetPseudoHeader(TCPPacket pack) {
		int src = pack.getSourceAsWord();
		int dst = pack.getDestinationAsWord();

		int protocol = pack.getProtocol();

		int TCPSegmentLength = pack.getTCPHeaderByteLength() + pack.getTCPDataByteLength();
		byte[] b = new byte[12];
		//System.arraycopy(payload, 0, buffer, 4 * Integer.parseInt(jTextFieldIPheaderLength.getText()) + 4 * Integer.parseInt(jTextFieldICMPHeaderLength.getText()), payload.length);
		System.arraycopy(toBytes(src), 0, b, 0, 4);
		System.arraycopy(toBytes(dst), 0, b, 4, 4);

		byte[] zero =
				{
						0x00
				};
		//System.arraycopy(zero, 0, b, 5, 1);
		System.arraycopy(toBytes(protocol), 0, b, 4, 4);
		System.arraycopy(toBytes(TCPSegmentLength), 0, b, 8, 4);

		byte[] TCPpack = new byte[pack.size()];
		pack.getData(TCPpack);

		byte[] header = new byte[b.length + TCPpack.length];
		System.arraycopy(b, 0, header, 0, b.length);
		System.arraycopy(TCPpack, 0, header, b.length, TCPpack.length);

		return header;
	}

	byte[] toBytes(int i) {
		byte[] result = new byte[4];

		result[0] = (byte) (i >> 24);
		result[1] = (byte) (i >> 16);
		result[2] = (byte) (i >> 8);
		result[3] = (byte) (i /*>> 0*/);

		return result;
	}

	private TCPPacket ReadFromHexFile(String filename) {
		try {
			File file = new File(filename);
			FileInputStream fis = new FileInputStream(file);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			String hex = br.readLine();
			byte[] buffer = hexStringToByteArray(hex);
			TCPPacket pack = new TCPPacket(buffer.length);
			pack.setData(buffer);
			return pack;
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

	private String ReadStringHex(String filename) {
		try {
			File file = new File(filename);
			FileInputStream fis = new FileInputStream(file);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			String hex = br.readLine();
			return hex;
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}
}
